"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./hooks/useTweets.ts":
/*!****************************!*\
  !*** ./hooks/useTweets.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTweets: () => (/* binding */ useTweets)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// frontend/hooks/useTweets.ts\n\n// Mock tweets data for offline development\nconst MOCK_TWEETS = [\n    {\n        id: 1,\n        original_text: \"I thinked about going to the store yesterday but I forgeted.\",\n        corrected_text: \"I thought about going to the store yesterday but I forgot.\",\n        explanation: \"The past tense of 'think' is 'thought', not 'thinked'. Similarly, the past tense of 'forget' is 'forgot', not 'forgeted'.\",\n        created_at: new Date().toISOString(),\n        user_id: 1\n    },\n    {\n        id: 2,\n        original_text: \"I have been studing english for 2 years and im getting better everyday.\",\n        corrected_text: \"I have been studying English for 2 years and I'm getting better every day.\",\n        explanation: \"The correct spelling is 'studying' (not 'studing'), 'English' should be capitalized, and 'everyday' should be two words ('every day') in this context.\",\n        created_at: new Date().toISOString(),\n        user_id: 1\n    }\n];\nfunction useTweets() {\n    const [tweets, setTweets] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [offlineMode, setOfflineMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    // Fetch tweets on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTweets.useEffect\": ()=>{\n            fetchTweets();\n        }\n    }[\"useTweets.useEffect\"], []);\n    // Function to fetch tweets\n    const fetchTweets = async ()=>{\n        try {\n            setIsLoading(true);\n            setError(null);\n            const apiUrl = \"http://localhost:8000\" || 0;\n            const token = localStorage.getItem('authToken');\n            console.log(\"Fetching tweets with token:\", token ? \"exists\" : \"does not exist\");\n            if (!token) {\n                throw new Error('Not authenticated');\n            }\n            try {\n                // Try to fetch from API\n                const response = await fetch(\"\".concat(apiUrl, \"/api/v1/tweets/\"), {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': \"Bearer \".concat(token)\n                    },\n                    // Short timeout to quickly fall back to mock data if API is unavailable\n                    signal: AbortSignal.timeout(3000)\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to fetch tweets');\n                }\n                let data = await response.json();\n                // Sort tweets by created_at, newest first\n                data.sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n                console.log(\"Tweets fetched successfully:\", data);\n                setTweets(data);\n                setOfflineMode(false);\n            } catch (fetchError) {\n                console.warn('Falling back to mock data:', fetchError);\n                // Fall back to mock data\n                // Sort MOCK_TWEETS by created_at, newest first\n                const sortedMockTweets = [\n                    ...MOCK_TWEETS\n                ].sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n                setTweets(sortedMockTweets);\n                setOfflineMode(true);\n            }\n        } catch (err) {\n            console.error('Error in tweet handling:', err);\n            setError(err instanceof Error ? err : new Error('Unknown error'));\n            // Fallback to mock data even in case of errors\n            // Sort MOCK_TWEETS by created_at, newest first\n            const sortedMockTweets = [\n                ...MOCK_TWEETS\n            ].sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n            setTweets(sortedMockTweets);\n            setOfflineMode(true);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Function to create a tweet\n    const createTweet = async (originalText)=>{\n        try {\n            // For offline mode, create a mock tweet\n            if (offlineMode) {\n                console.log(\"Creating tweet in offline mode\");\n                // Create a mock correction (simulating AI)\n                let correctedText = originalText;\n                let explanation = \"Great job! Your English is perfect in this tweet.\";\n                // Simple offline corrections for demo purposes\n                if (originalText.includes(\"thinked\")) {\n                    correctedText = originalText.replace(\"thinked\", \"thought\");\n                    explanation = \"The past tense of 'think' is 'thought', not 'thinked'.\";\n                } else if (originalText.includes(\"im \")) {\n                    correctedText = originalText.replace(\"im \", \"I'm \");\n                    explanation = \"The contraction of 'I am' is 'I'm', not 'im'.\";\n                } else if (originalText.includes(\"everyday\")) {\n                    correctedText = originalText.replace(\"everyday\", \"every day\");\n                    explanation = \"'Everyday' (one word) is an adjective meaning 'ordinary'. You need 'every day' (two words) when referring to each day.\";\n                }\n                const newTweet = {\n                    id: Math.max(0, ...tweets.map((t)=>t.id)) + 1,\n                    original_text: originalText,\n                    corrected_text: correctedText,\n                    explanation: explanation,\n                    created_at: new Date().toISOString(),\n                    user_id: 1\n                };\n                // Update tweets list - correctly add to beginning of array\n                setTweets((prevTweets)=>[\n                        newTweet,\n                        ...prevTweets\n                    ]);\n                return newTweet;\n            }\n            // Online mode - try to call API\n            const apiUrl = \"http://localhost:8000\" || 0;\n            const token = localStorage.getItem('authToken');\n            console.log(\"Creating tweet with token:\", token ? \"exists\" : \"does not exist\");\n            if (!token) {\n                throw new Error('Not authenticated');\n            }\n            try {\n                const response = await fetch(\"\".concat(apiUrl, \"/api/v1/tweets/\"), {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': \"Bearer \".concat(token)\n                    },\n                    body: JSON.stringify({\n                        original_text: originalText\n                    }),\n                    signal: AbortSignal.timeout(5000) // 5 second timeout\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to create tweet');\n                }\n                const newTweet = await response.json();\n                console.log(\"Tweet created successfully:\", newTweet);\n                // Update tweets list - ensure it's added to the beginning\n                setTweets((prevTweets)=>[\n                        newTweet,\n                        ...prevTweets\n                    ]);\n                return newTweet;\n            } catch (fetchError) {\n                console.warn('Falling back to mock creation:', fetchError);\n                // Fall back to mock creation\n                setOfflineMode(true);\n                // Call the function again, which will now use offline mode\n                return createTweet(originalText);\n            }\n        } catch (error) {\n            console.error('Error creating tweet:', error);\n            throw error;\n        }\n    };\n    return {\n        tweets,\n        isLoading,\n        error,\n        createTweet,\n        refreshTweets: fetchTweets,\n        offlineMode\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./hooks/useTweets.ts\n"));

/***/ })

});